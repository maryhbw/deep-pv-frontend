import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import pydeck as pdk
import numpy as np
import json
from deep_pv_frontend.utils.processing import predict_to_map
import plotly.figure_factory as ff
import requests

st.set_page_config(layout="wide")
API_PATH = 'https://deepcloud-vpmy6xoida-ew.a.run.app'
url = f'{API_PATH}/hood?'

#preloaded data
with open("first_try.json") as jsonFile:
    jsonObject = json.load(jsonFile)
    jsonFile.close()
preloaded = jsonObject

def display_data(results = preloaded):
    results = results['results']
    map = predict_to_map(results)
    st.pydeck_chart(map)

    df = pd.DataFrame(results)
    table_df = df[['name','lat', 'lon', 'area_correction', 'kWh_mon']]
    total_energy_output = df['kWh_mon'].sum().round()
    total_num_PV = len(df)
    average_energy_output = df['kWh_mon'].mean().round()

    col1, col2, col3 = st.columns(3)
    col1.metric(label = "No. panels in image", value =total_num_PV)
    col2.metric(label = "Monthly energy (kwh)", value =total_energy_output)
    col3.metric(label = "Av. energy (kWh)", value =average_energy_output)

    st.markdown(f"""\nThese panels are sufficient to supply
                <span style="background-color:yellow">{int(total_energy_output / (2479/12))} households</span>
                 in the Netherlands at an average of 2.479/kWh.
                It also represents a monthly energy value of
                <span style="background-color:yellow">{0.7 * total_energy_output}</span>
                Euro, at an average of
                <span style="background-color:yellow">{0.7* average_energy_output}</span>
                Euro per panel constellation""", unsafe_allow_html=True)

    with st.expander(f"Distribution energy production panels"):
        st.bar_chart(pd.DataFrame(results)['kWh_mon'])
    with st.expander(f"All analyzed solar panel data"):
        st.dataframe(table_df)

def get_custom_data():
    # response = requests.get(url, params=params)
    response = preloaded
    display_data(response)


######################## main interface ############

st.header("deep-pv")
st.markdown("Calculate energy generated by solar panels anywhere in the world using deep-learning☀️")

option = st.selectbox(
     'Select view',
     ('Rotterdam', 'Custom'))

if option == 'Custom':
    col1, col2 = st.columns(2)
    st.write("To make a prediction, select a location and we'll calculate your KPIs!")
    latitude = col1.text_input('latitude', '51.927682071121296')
    longitude = col1.text_input('longitude', '4.46474167449461')
    key = col1.text_input('API Key')
    kpi = col1.button('Generate KPIs')
    params = {'latitude':latitude, 'longitude':longitude, 'key': key,}
    if kpi:
        get_custom_data()

elif option == 'Rotterdam':
    st.write("Solar panel data analysed from Rotterdam on 20km2 in June 2019")
    display_data(results = preloaded)

with st.expander(f"About"):
        st.write("""This project uses deep learning to identify and quantify solar panels anywhere in the world. It uses a Multi-Region Convolutional Neural Network (MRCNN) architecture trained on images in California and China.
                 Project team: Toby Winter, Mary Ward, Marco Rodriguez, Ivan Thung""")
